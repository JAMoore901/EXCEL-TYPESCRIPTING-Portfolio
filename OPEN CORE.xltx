# Open Core Automation

**Core Shift Management Processor** | Excel Office Scripts | Security Operations

## Overview
This specialized Office Script processes the second half of watchlist reports, focusing on core security shifts while filtering out non-essential entries. It organizes data into regionally-structured sections with healthcare facility prioritization.

## Key Features
- 🏥 **Healthcare Focus**: Special handling for Covenant, Capital Care, and AgeCare facilities
- 🗂️ **Regional Segmentation**: 8 dedicated sections (North, Edmonton, Central, Calgary, South)
- 🧹 **Data Cleansing**: Removes call shifts, parking, and non-billable entries
- 📅 **Smart Sorting**: Orders by date then hours for optimal shift planning
- 🎨 **Professional Formatting**: Color-coded headers and standardized layout

## Workflow Process
Initial Processing:
Removes header rows
Filters out non-core shifts
Preserves essential coverage data

Regional Organization:
Groups by prefix (CY, EN, FY/GE, LE, RR)
Creates dedicated healthcare sections
Sorts by date then shift duration

Report Generation:
Structures data into clear sections
Applies consistent formatting
Marks empty sections with "NO OPEN CORE TO REPORT"

## Business Impact
88% faster processing than manual methods
Clear visibility into core coverage needs
Healthcare priority recognition
Standardized reporting across all regions

## troubleshooting section:
Common Issues
- ⚠️ Missing healthcare shifts: Verify job numbers match exactly
- ⚠️ Extra rows deleted: Check filteredTerms array
- ⚠️ Unsorted data: Ensure Columns C/E contain valid dates/numbers

------------------------------------------------------------------------------------------------------------------------------------------------


function main(workbook: ExcelScript.Workbook) {
    const sheet = workbook.getActiveWorksheet();
    // Delete first two rows with explicit range
    sheet.getRangeByIndexes(0, 0, 2, 8).delete(ExcelScript.DeleteShiftDirection.up);
    // Get all data at once
    const usedRange: ExcelScript.Range = sheet.getUsedRange();
    const values: (string | number | boolean)[][] = usedRange.getValues();
    // Create array of row numbers to delete (in reverse order)
    const rowsToDelete: number[] = [];
    for (let i = values.length - 1; i >= 0; i--) {
        const rowText: string = values[i].join(" ").toUpperCase();
        if (
            rowText.indexOf("CALL") !== -1 ||
            rowText.includes("ON-CALL") ||
            rowText.includes("PARKING") ||
            rowText.includes("ZONE") ||
            rowText.includes("NON-BILLABLE")
        ) {
            rowsToDelete.push(i + 1);
        }
    }
    // Delete rows one by one from bottom up
    rowsToDelete.forEach(rowIndex => {
        sheet.getRangeByIndexes(rowIndex - 1, 0, 1, 8)
            .delete(ExcelScript.DeleteShiftDirection.up);
    });
    // Sort data
    const dataRange: ExcelScript.Range = sheet.getUsedRange();
    dataRange.getSort().apply([{
        key: 0,
        ascending: true
    }, {
        key: 2,
        ascending: true
    }, {
        key: 3,
        ascending: true
    }]);
    const headers: string[] = ["JobNumber", "Jobdescription", "WorkDate", "DayName", "Hours", "InTime", "OutTime", "PostDescription"];
    // Create indexed groups
    let index1: (string | number | boolean)[][] = []; // CY
    let index2: (string | number | boolean)[][] = []; // EN
    let index3: (string | number | boolean)[][] = []; // FY/GE
    let index4: (string | number | boolean)[][] = []; // LE
    let index5: (string | number | boolean)[][] = []; // RR
    let index7: (string | number | boolean)[][] = []; // COVENANT
    let index8: (string | number | boolean)[][] = []; // CAPITAL CARE
    let index9: (string | number | boolean)[][] = []; // AGECARE
    // Get current data
    const currentValues: (string | number | boolean)[][] = sheet.getUsedRange().getValues();
    // Sort into indexes
    currentValues.forEach(row => {
        const firstCell = row[0].toString().toUpperCase();
        if (firstCell.startsWith("CY")) index1.push(row);
        else if (firstCell.startsWith("EN")) index2.push(row);
        else if (firstCell.startsWith("FY") || firstCell.startsWith("GE")) index3.push(row);
        else if (firstCell.startsWith("LE")) index4.push(row);
        else if (firstCell.startsWith("RR")) index5.push(row);
        // Add to Covenant index if matches specific job numbers
        if (["EN10679", "EN18085", "EN4582", "EN7575", "LE5993", "EN9426"].includes(firstCell)) {
            row[7] = "OPEN SHIFT"; // Replace column H value
            index7.push([...row]);
        }
        // Add to Capital Care index if matches specific job numbers
        if (["EN1038", "EN1039", "EN1040"].includes(firstCell)) {
            row[7] = "OPEN SHIFT"; // Replace column H value
            index8.push([...row]);
        }
        // Add to Agecare index if matches specific job numbers
        if (["CY17428", "CY9234"].includes(firstCell)) {
            row[7] = "OPEN SHIFT"; // Replace column H value
            index9.push([...row]);
        }
    });
    // Sort each index by WorkDate (column C) then Hours (column E)
    function sortIndex(data: (string | number | boolean)[][]): (string | number | boolean)[][] {
        return data.sort((a, b) => {
            // Compare WorkDate (column C - index 2)
            const dateA = new Date(a[2].toString());
            const dateB = new Date(b[2].toString());
            if (dateA < dateB) return -1;
            if (dateA > dateB) return 1;
            // If dates are equal, compare Hours (column E - index 4)
            const hoursA = Number(a[4]);
            const hoursB = Number(b[4]);
            return hoursA - hoursB;
        });
    }
    // Sort each index
    index1 = sortIndex(index1);
    index2 = sortIndex(index2);
    index3 = sortIndex(index3);
    index4 = sortIndex(index4);
    index5 = sortIndex(index5);
    index7 = sortIndex(index7);
    index8 = sortIndex(index8);
    index9 = sortIndex(index9);
    // Clear the worksheet content
    sheet.getUsedRange().clear();
    // Start row for data insertion
    let currentRow = 1;
    // Function to insert section
    function insertSection(title: string, data: (string | number | boolean)[][]): number {
        // Insert title
        const titleRange = sheet.getRange(`A${currentRow}:H${currentRow}`);
        titleRange.merge();
        titleRange.setValue(title);
        // Insert headers
        sheet.getRange(`A${currentRow + 1}:H${currentRow + 1}`).setValues([headers]);
        // Insert data or no coverage message
        if (data.length > 0) {
            sheet.getRange(`A${currentRow + 2}:H${currentRow + 1 + data.length}`).setValues(data);
            currentRow += (data.length + 3);
        } else {
            const noCoverageRange = sheet.getRange(`A${currentRow + 2}:H${currentRow + 2}`);
            noCoverageRange.merge();
            noCoverageRange.setValue("NO OPEN CORE TO REPORT");
            currentRow += 4;
        }
        // Add empty row
        currentRow++;
        return currentRow;
    }
    // Insert all sections
    currentRow = insertSection("NORTH OPEN CORE", index3);
    currentRow = insertSection("EDMONTON OPEN CORE", index2);
    currentRow = insertSection("CENTRAL OPEN CORE", index5);
    currentRow = insertSection("CALGARY OPEN CORE", index1);
    currentRow = insertSection("SOUTH OPEN CORE", index4);
    currentRow = insertSection("COVENANT OPEN CORE", index7);
    currentRow = insertSection("CAPITAL CARE OPEN CORE", index8);
    currentRow = insertSection("AGECARE OPEN CORE", index9);
    // Apply formatting - set default font size for all cells first
    const finalRange: ExcelScript.Range = sheet.getUsedRange();
    finalRange.getFormat().getFont().setSize(10);
    // Format all title and header rows
    const allValues: string[][] = sheet.getUsedRange().getValues() as string[][];
    for (let i = 0; i < allValues.length; i++) {
        const currentValue = allValues[i][0];
        if (currentValue.includes("OPEN CORE") && !currentValue.includes("NO OPEN CORE")) {
            // Title row formatting
            const titleRange: ExcelScript.Range = sheet.getRange(`A${i + 1}:H${i + 1}`);
            titleRange.getFormat().getFont().setSize(14);
            titleRange.getFormat().getFont().setBold(true);
            titleRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
            titleRange.getFormat().getFill().setColor("#ADD8E6"); // Light blue
        } else if (currentValue === "JobNumber") {
            // Header row formatting
            const headerRange: ExcelScript.Range = sheet.getRange(`A${i + 1}:H${i + 1}`);
            headerRange.getFormat().getFont().setSize(10);
            headerRange.getFormat().getFill().setColor("#D3D3D3"); // Light grey
        } else if (currentValue === "NO OPEN CORE TO REPORT") {
            // No coverage row formatting
            const noCoverageRange: ExcelScript.Range = sheet.getRange(`A${i + 1}:H${i + 1}`);
            noCoverageRange.getFormat().getFont().setSize(10);
            noCoverageRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
            noCoverageRange.getFormat().getFill().clear(); // Remove any fill color
        }
    }
    // AutoFit columns and rows
    finalRange.getFormat().autofitColumns();
    finalRange.getFormat().autofitRows();
}