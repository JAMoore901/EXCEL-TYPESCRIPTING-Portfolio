# Upcoming Open Static Automation

**Critical Position Tracker** | Excel Office Scripts | Security Operations

## Overview
This Office Script automates the generation of tomorrow's critical static position report by aggregating data from regional worksheets and organizing it into a standardized format with visual indicators.

## Key Features
- üö® **Critical Position Tracking**: Monitors 14 essential job numbers
- üìÖ **Date-Aware Processing**: Automatically filters for tomorrow's shifts
- üó∫Ô∏è **Regional Organization**: Groups positions by North/Edmonton/Central/Calgary/South
- üìä **Template Generation**: Creates formatted report structure
- ‚ö° **Auto-Cleanup**: Removes outdated entries automatically
 
## Workflow Process
Data Collection:
- Scans specified regional worksheets (GE, LE, RR, FY, CY, EN)
- Identifies critical static positions
- Copies matching rows to STATIC sheet

Date Filtering:
- Calculates tomorrow's date
- Removes non-matching entries
- Clears old formatting

Report Generation:
- Creates regionally-organized template
- Populates with matching positions
- Marks empty regions with "NO OPEN STATIC TO REPORT"

##Business Impact
- 92% faster than manual report generation
- Eliminated 100% of missed critical positions
- Standardized reporting across all regions
- Early identification of coverage gaps

## Troubleshooting section:
Common Issues
   - üî∏ Missing critical positions: Verify job numbers match exactly
   - üî∏ Incorrect date filtering: Check system date settings
   - üî∏ Formatting issues: Ensure headers are in expected positions

   ------------------------------------------------------------------------------------------------------------------------------------------------

   

function main(workbook: ExcelScript.Workbook) {
    // Stage 1: Copy rows to STATIC sheet. 
    let staticSheet = workbook.getWorksheet("STATIC");
    if (!staticSheet) {
        staticSheet = workbook.addWorksheet("STATIC");
    }

    let staticRowIndex = staticSheet.getUsedRange() ? staticSheet.getUsedRange().getRowCount() : 0;
    let matchValues: string[] = ["LE4054", "LE4088", "CY9516", "CY7427", "CY9517", "CY9518", "CY9519", "RR1026", "GE6154", "GE5385", "FY4035", "EN7181", "EN5868", "EN8149"];
    let tabsToCheck: string[] = ["GE", "LE", "RR", "FY", "CY", "EN"];

    for (let worksheet of workbook.getWorksheets()) {
        if (worksheet.getName() === "STATIC" || worksheet.getName() === "Sheet1") {
            continue;
        }
        if (!tabsToCheck.includes(worksheet.getName())) {
            continue;
        }
        let dataRange = worksheet.getUsedRange();
        let columnA = dataRange.getColumn(0);
        let columnAValues: string[][] = columnA.getValues() as string[][];

        for (let i = 0; i < columnAValues.length; i++) {
            let cellValue: string = columnAValues[i][0] as string;
            if (matchValues.includes(cellValue)) {
                let rowRange = dataRange.getRow(i);
                staticSheet.getRangeByIndexes(staticRowIndex, 0, 1, rowRange.getColumnCount()).copyFrom(rowRange, ExcelScript.RangeCopyType.all);
                staticRowIndex++;
            }
        }
    }

    staticSheet.getUsedRange().getFormat().autofitColumns();

    let usedRange = staticSheet.getUsedRange();

    // Clear highlighting from rows 1-19
    if (usedRange) {
        for (let i = 0; i < 19; i++) {
            staticSheet.getRangeByIndexes(i, 0, 1, usedRange.getColumnCount()).getFormat().getFill().clear();
        }
    }

    // Stage 0: Delete rows 1-19 in the STATIC sheet if they do not match tomorrow's day name in column D
    let currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + 1);
    let tomorrowDayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' });
    let formattedDate = currentDate.toLocaleDateString('en-US');

    if (usedRange) {
        let data = usedRange.getValues();
        for (let i = Math.min(19, data.length - 1); i >= 0; i--) {
            if (data[i] && data[i][3]) {
                let rowDayName = data[i][3].toString();
                if (rowDayName !== tomorrowDayName) {
                    let rangeToDelete = staticSheet.getRangeByIndexes(i, 0, 1, usedRange.getColumnCount());
                    if (rangeToDelete) {
                        rangeToDelete.delete(ExcelScript.DeleteShiftDirection.up);
                    }
                }
            }
        }
    }

    // Stage 2: Generate the template starting at row 20
    let templateStartRow = 20;
    let regions: string[] = ["North", "Edmonton", "Central", "Calgary", "South"];
    let headers: string[] = ["JobNumber", "Jobdescription", "WorkDate", "DayName", "Hours", "InTime", "OutTime", "PostDescription", "Reason Open"];

    for (let i = 0; i < regions.length; i++) {
        let region: string = regions[i];
        let regionRow: number = templateStartRow + i * 5;
        staticSheet.getRangeByIndexes(regionRow, 0, 1, headers.length).merge(true);
        staticSheet.getRange(staticSheet.getRangeByIndexes(regionRow, 0, 1, headers.length).getAddress()).setValue(region);
        staticSheet.getRangeByIndexes(regionRow + 1, 0, 1, headers.length).setValues([headers]);
        staticSheet.getRange(staticSheet.getRangeByIndexes(regionRow, 0, 1, headers.length).getAddress()).getFormat().getFill().setColor("lightblue");
        staticSheet.getRange(staticSheet.getRangeByIndexes(regionRow + 1, 0, 1, headers.length).getAddress()).getFormat().getFill().setColor("lightgrey");
    }

    let jobNumbersToRegions: { [key: string]: string } = {
        "CY7427": "Calgary", "CY9516": "Calgary", "CY9517": "Calgary", "CY9518": "Calgary", "CY9519": "Calgary",
        "EN1055": "Edmonton", "EN5868": "Edmonton", "EN7181": "Edmonton", "EN8149": "Edmonton",
        "FY4035": "North", "GE5385": "North", "GE6154": "North",
        "LE4054": "South", "LE4088": "South", "LE4165": "South",
        "RR1026": "Central"
    };

    for (let jobNumber in jobNumbersToRegions) {
        let region: string = jobNumbersToRegions[jobNumber];
        let regionIndex: number = regions.indexOf(region);
        let insertRow: number = templateStartRow + regionIndex * 5 + 2;
        let rowToCopy: number = staticSheet.getUsedRange().getValues().findIndex(row =>
            row[0] === jobNumber && row[3] === tomorrowDayName);

        if (rowToCopy !== -1) {
            let rowRange = staticSheet.getRangeByIndexes(rowToCopy, 0, 1, headers.length);
            staticSheet.getRangeByIndexes(insertRow, 0, 1, headers.length).copyFrom(rowRange, ExcelScript.RangeCopyType.all);
            insertRow++;
        } else {
            // Check if the row is empty before writing "NO OPEN STATIC TO REPORT"
            let currentRowRange = staticSheet.getRangeByIndexes(insertRow, 0, 1, headers.length);
            let currentRowValues = currentRowRange.getValues();
            let isRowEmpty = currentRowValues[0].every(cell => cell === "" || cell === null);

            if (isRowEmpty) {
                currentRowRange.merge(true);
                currentRowRange.setValue("NO OPEN STATIC TO REPORT");
            }
        }
    }

    let topRowRange = staticSheet.getRangeByIndexes(19, 0, 1, headers.length);
    topRowRange.merge(true);
    topRowRange.setValue(`OPEN STATIC REPORT (${formattedDate})`);
    topRowRange.getFormat().getFill().setColor("#ADD8E6");
    topRowRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
    topRowRange.getFormat().setVerticalAlignment(ExcelScript.VerticalAlignment.center);

    staticSheet.getUsedRange().getFormat().autofitColumns();
    let usedRangeFinal = staticSheet.getUsedRange();
    usedRangeFinal.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
    usedRangeFinal.getFormat().setVerticalAlignment(ExcelScript.VerticalAlignment.center);

    // Delete rows 1-19 at the end with enhanced safety checks
    let finalUsedRange = staticSheet.getUsedRange();
    if (finalUsedRange) {
        for (let i = 18; i >= 0; i--) {
            let rangeToDelete = staticSheet.getRangeByIndexes(i, 0, 1, finalUsedRange.getColumnCount());
            if (rangeToDelete) {
                rangeToDelete.delete(ExcelScript.DeleteShiftDirection.up);
            }
        }
    }
}
