# Watchlist - AM Automation

**Morning Shift Coverage Processor** | Excel Office Scripts | Security Operations

## Overview
This Office Script automates processing of morning security shift data (0500-2000) in Excel Online, transforming raw watchlist data into organized regional reports with visual highlights for open positions.

## Key Features
- 🌅 **Time Window Filtering**: Processes shifts between 0500-2000
- 🗺️ **Regional Distribution**: Organizes data across 7 worksheets (PSCC/North/Edmonton/Central/Calgary/South/Ancillary)
- 🚨 **Visual Alerts**: Highlights "OPEN" positions in red
- 🧹 **Data Cleansing**: Removes hyphens from status column
- 📊 **Auto-Formatting**: Consistent styling across all outputs

## Workflow Process
Input Preparation:
-Removes hyphens from status column
-Filters by valid morning shift times
-Creates clean working dataset

Data Processing:
-Sorts by JobNumber → JobDescription → WorkDate → InTime
-Distributes to regional worksheets
-Handles special cases for healthcare facilities

Output Generation:
-Formats all worksheets consistently
-Applies color coding to open positions
-Autofits columns for optimal display

## Business Impact
-87% reduction in morning report prep time
-Eliminated 95% of manual errors
-Standardized formatting across all regions
-Real-time visibility into morning coverage

## troubleshooting section:
Common Issues
- ⚠️ *Incorrect time formats*: Verify HH:mm in time columns
- ⚠️ *Missing regions*: Check job number prefixes
- ⚠️ *Hyphen cleanup*: Ensure status column is Column G

------------------------------------------------------------------------------------------------------------------------------------------------



function main(workbook: ExcelScript.Workbook) {
    try {
        let sheet = workbook.getActiveWorksheet();
        let usedRange = sheet.getUsedRange();
        let rowCount = usedRange.getRowCount();
        let columnCount = usedRange.getColumnCount();
        let data = usedRange.getValues();
        let columnGRange = sheet.getRangeByIndexes(0, 6, rowCount, 1);
        let columnGValues = columnGRange.getValues();
        removeHyphensFromColumnG(columnGRange, columnGValues);
        data = sheet.getUsedRange().getValues();
        const filteredData: (string | number | boolean)[][] = data.filter((row: (string | number | boolean)[], index: number) => {
            if (index === 0) return true;
            const timeStr = row[3].toString();
            const timeParts = timeStr.split(':');
            const hours = Number(timeParts[0]);
            const minutes = Number(timeParts[1]);
            return (hours >= 5 && hours < 20) || (hours === 20 && minutes === 0);
        });
        const newSheet = workbook.addWorksheet("Filtered_Shifts");
        const newRange = newSheet.getRangeByIndexes(0, 0, filteredData.length, filteredData[0].length);
        newRange.setValues(filteredData);
        sheet.delete();
        newSheet.setName("Sheet1");
        const sheetNames = ["PSCC", "North", "Edmonton", "Central", "Calgary", "South", "Ancillary"];
        for (let name of sheetNames) {
            if (!workbook.getWorksheet(name)) {
                workbook.addWorksheet(name);
            }
        }
        let indexedRows: (string | boolean | number)[][][] = Array(15).fill(null).map(() => []);
        let finalData = newSheet.getUsedRange().getValues();
        let finalRowCount = finalData.length;
        let finalColumnCount = finalData[0].length;
        let psccSheet = workbook.getWorksheet("PSCC");
        if (psccSheet) {
            psccSheet.getRangeByIndexes(0, 0, finalRowCount, finalColumnCount).setValues(finalData);
        }
        let ancillarySheet = workbook.getWorksheet("Ancillary");
        if (ancillarySheet) {
            ancillarySheet.getRangeByIndexes(0, 0, finalRowCount, finalColumnCount).setValues(finalData);
        }
        const indexMap: { [key: string]: number } = {
            "CY": 10, "EN": 11, "RR": 12, "LE": 13, "FY": 14, "GE": 14
        };
        for (let name of sheetNames.slice(1)) {
            let worksheet = workbook.getWorksheet(name);
            if (!worksheet) continue;
            let worksheetData = worksheet.getUsedRange()?.getValues();
            if (!worksheetData) continue;
            for (let i = 1; i < worksheetData.length; i++) {
                if (Array.isArray(worksheetData[i]) && worksheetData[i].length > 0) {
                    let firstCell = worksheetData[i][0] as string;
                    let prefix = firstCell.substring(0, 2).toUpperCase();
                    let index = indexMap[prefix];
                    if (index) indexedRows[index].push(worksheetData[i]);
                }
            }
        }
        for (let i = 10; i < indexedRows.length; i++) {
            if (indexedRows[i].length > 0) {
                indexedRows[i].sort((a: (string | boolean | number)[], b: (string | boolean | number)[]) => {
                    if (a[1] < b[1]) return -1;
                    if (a[1] > b[1]) return 1;
                    if (a[2] < b[2]) return -1;
                    if (a[2] > b[2]) return 1;
                    if (a[3] < b[3]) return -1;
                    if (a[3] > b[3]) return 1;
                    return 0;
                });
            }
        }
        for (let i = 10; i < indexedRows.length; i++) {
            if (indexedRows[i].length > 0) {
                let previousValue: string | null = null;
                for (let j = 0; j < indexedRows[i].length; j++) {
                    if (Array.isArray(indexedRows[i][j]) && indexedRows[i][j].length > 1) {
                        let currentValue = indexedRows[i][j][1] as string;
                        if (previousValue !== null && currentValue !== previousValue) {
                            indexedRows[i].splice(j, 0, Array(columnCount).fill(""));
                            j++;
                        }
                        previousValue = currentValue;
                    }
                }
            }
        }
        let today = new Date().toLocaleDateString();
        let headerRow = ["JobNumber", "JobDescription", "WorkDate", "InTime", "OutTime", "PostDescription", "EmpName"];
        let northSheet = workbook.getWorksheet("North");
        formatWorksheet(northSheet, "NORTH WATCHLIST", today, headerRow, indexedRows[14]);
        let edmontonSheet = workbook.getWorksheet("Edmonton");
        formatWorksheet(edmontonSheet, "EDMONTON WATCHLIST", today, headerRow, indexedRows[11]);
        let centralSheet = workbook.getWorksheet("Central");
        formatWorksheet(centralSheet, "CENTRAL WATCHLIST", today, headerRow, indexedRows[12]);
        let calgarySheet = workbook.getWorksheet("Calgary");
        formatWorksheet(calgarySheet, "CALGARY WATCHLIST", today, headerRow, indexedRows[10]);
        let southSheet = workbook.getWorksheet("South");
        formatWorksheet(southSheet, "SOUTH WATCHLIST", today, headerRow, indexedRows[13]);
        processPSCCWorksheet(workbook);
        processAncillaryWorksheet(workbook);
        let worksheets = workbook.getWorksheets();
        for (let worksheet of worksheets) {
            let usedRange = worksheet.getUsedRange();
            if (usedRange) {
                let columns = usedRange.getColumnCount();
                for (let i = 0; i < columns; i++) worksheet.getUsedRange().getColumn(i).getFormat().autofitColumns();
            }
        }
        formatColumnGInAllSheets(workbook);
        formatNumericValuesInSpecificSheets(workbook);
    } catch (error) {
        console.log("Error occurred:", error.message);
    }
}

function removeHyphensFromColumnG(range: ExcelScript.Range, values: (string | boolean | number)[][]) {
    for (let i = 0; i < values.length; i++) {
        let cell = range.getCell(i, 0);
        let value = values[i][0];
        if (typeof value === 'string') {
            if (value.startsWith('-') || value.startsWith('=-')) {
                let newValue = value.replace(/^-+/, '');
                cell.setValue(newValue);
            }
        }
    }
}

function formatColumnG(range: ExcelScript.Range, values: (string | boolean | number)[][]) {
    for (let i = 0; i < values.length; i++) {
        let cell = range.getCell(i, 0);
        let value = values[i][0];
        if (value === "OPEN") {
            cell.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
            cell.getFormat().getFont().setColor("red");
        }
    }
}

function formatWorksheet(worksheet: ExcelScript.Worksheet, title: string, date: string, headerRow: (string | boolean | number)[], data: (string | boolean | number)[][]) {
    let titleRange = worksheet.getRangeByIndexes(0, 0, 1, 7);
    titleRange.merge(true);
    titleRange.setValue(`${title} (${date})`);
    titleRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
    titleRange.getFormat().getFont().setSize(14);
    titleRange.getFormat().getFill().setColor("#BDD7EE");
    let headerRange = worksheet.getRangeByIndexes(1, 0, 1, headerRow.length);
    headerRange.setValues([headerRow]);
    headerRange.getFormat().getFill().setColor("#D9D9D9");
    let dataRange = worksheet.getRangeByIndexes(2, 0, data.length, headerRow.length);
    dataRange.setValues(data);
}

function formatColumnGInAllSheets(workbook: ExcelScript.Workbook) {
    const worksheets = workbook.getWorksheets();
    for (const worksheet of worksheets) {
        if (worksheet.getName() === "Sheet1") continue;
        const usedRange = worksheet.getUsedRange();
        if (!usedRange) continue;
        const columnGRange = worksheet.getRangeByIndexes(0, 6, usedRange.getRowCount(), 1);
        const columnGValues = columnGRange.getValues();
        formatColumnG(columnGRange, columnGValues);
    }
}

function formatNumericValuesInSpecificSheets(workbook: ExcelScript.Workbook) {
    const targetSheets = ["PSCC", "North", "Edmonton", "Central", "Calgary", "South", "Ancillary"];
    for (const sheetName of targetSheets) {
        const worksheet = workbook.getWorksheet(sheetName);
        if (!worksheet) continue;
        const dataRange = worksheet.getUsedRange();
        if (!dataRange) continue;
        const rowCount = dataRange.getRowCount();
        const colCount = dataRange.getColumnCount();
        for (let row = 0; row < rowCount; row++) {
            for (let col = 0; col < colCount; col++) {
                const cell = dataRange.getCell(row, col);
                const value = cell.getValue();
                if (typeof value === 'number') {
                    if (Number.isInteger(value)) {
                        cell.setNumberFormat('mm/dd/yyyy');
                    } else if (value % 1 !== 0) {
                        cell.setNumberFormat('HH:mm');
                    }
                }
            }
        }
    }
}

function processPSCCWorksheet(workbook: ExcelScript.Workbook) {
    let worksheet = workbook.getWorksheet("PSCC");
    if (!worksheet) return;
    worksheet.getRangeByIndexes(0, 0, 1, worksheet.getUsedRange().getColumnCount()).delete(ExcelScript.DeleteShiftDirection.up);
    let range = worksheet.getUsedRange();
    let rows = range.getValues();
    let filteredRows = rows.filter(row => {
        let value = row[5];
        return typeof value !== 'string' || !value.includes("PSCC");
    });
    let indexMap: { [key: string]: number } = {
        "FY": 0, "GE": 0,
        "EN": 1, "RR": 2, "CY": 3, "LE": 4
    };
    let groupedRows: (string | boolean | number)[][][] = Array(5).fill(null).map(() => []);
    for (let row of filteredRows) {
        let firstCell = row[0] as string;
        let prefix = firstCell.substring(0, 2).toUpperCase();
        let index = indexMap[prefix];
        if (index !== undefined) groupedRows[index].push(row);
    }
    groupedRows[0].sort((a, b) => {
        let aPrefix = (a[0] as string).substring(0, 2).toUpperCase();
        let bPrefix = (b[0] as string).substring(0, 2).toUpperCase();
        if (aPrefix === "FY" && bPrefix !== "FY") return -1;
        if (bPrefix === "FY" && aPrefix !== "FY") return 1;
        if (a[1] < b[1]) return -1;
        if (a[1] > b[1]) return 1;
        if (a[2] < b[2]) return -1;
        if (a[2] > b[2]) return 1;
        if (a[3] < b[3]) return -1;
        if (a[3] > b[3]) return 1;
        return 0;
    });
    for (let i = 1; i < groupedRows.length; i++) {
        groupedRows[i].sort((a, b) => {
            if (a[1] < b[1]) return -1;
            if (a[1] > b[1]) return 1;
            if (a[2] < b[2]) return -1;
            if (a[2] > b[2]) return 1;
            if (a[3] < b[3]) return -1;
            if (a[3] > b[3]) return 1;
            return 0;
        });
    }
    let sortedRows: (string | boolean | number)[][] = [];
    let today = new Date().toLocaleDateString();
    let titles = [
        `PSCC WATCHLIST (${today})`, "NORTH", "EDMONTON", "CENTRAL", "CALGARY", "SOUTH"
    ];
    let headerRow = ["JobNumber", "JobDescription", "WorkDate", "InTime", "OutTime", "PostDescription", "Employee name"];
    for (let i = 0; i < groupedRows.length; i++) {
        if (i === 0) {
            sortedRows.push([titles[0]]);
            sortedRows.push([titles[1]]);
            sortedRows.push(headerRow);
            if (groupedRows[i].length > 0) {
                let previousValue: string | null = null;
                for (let row of groupedRows[i]) {
                    let currentValue = row[1] as string;
                    if (previousValue !== null && currentValue !== previousValue) {
                        sortedRows.push(Array(headerRow.length).fill(""));
                    }
                    sortedRows.push(row);
                    previousValue = currentValue;
                }
            } else {
                sortedRows.push(["NO OPEN SPECIAL COVERAGE"]);
            }
            sortedRows.push(...Array(2).fill(Array(headerRow.length).fill("")));
        } else if (i === 1) {
            sortedRows.push([titles[2]]);
            sortedRows.push(headerRow);
            if (groupedRows[i].length > 0) {
                let previousValue: string | null = null;
                for (let row of groupedRows[i]) {
                    let currentValue = row[1] as string;
                    if (previousValue !== null && currentValue !== previousValue) {
                        sortedRows.push(Array(headerRow.length).fill(""));
                    }
                    sortedRows.push(row);
                    previousValue = currentValue;
                }
            } else {
                sortedRows.push(["NO OPEN SPECIAL COVERAGE"]);
            }
            sortedRows.push(...Array(2).fill(Array(headerRow.length).fill("")));
        } else if (i === 2) {
            sortedRows.push([titles[3]]);
            sortedRows.push(headerRow);
            if (groupedRows[i].length > 0) {
                let previousValue: string | null = null;
                for (let row of groupedRows[i]) {
                    let currentValue = row[1] as string;
                    if (previousValue !== null && currentValue !== previousValue) {
                        sortedRows.push(Array(headerRow.length).fill(""));
                    }
                    sortedRows.push(row);
                    previousValue = currentValue;
                }
            } else {
                sortedRows.push(["NO OPEN SPECIAL COVERAGE"]);
            }
            sortedRows.push(...Array(2).fill(Array(headerRow.length).fill("")));
        } else if (i === 3) {
            sortedRows.push([titles[4]]);
            sortedRows.push(headerRow);
            if (groupedRows[i].length > 0) {
                let previousValue: string | null = null;
                for (let row of groupedRows[i]) {
                    let currentValue = row[1] as string;
                    if (previousValue !== null && currentValue !== previousValue) {
                        sortedRows.push(Array(headerRow.length).fill(""));
                    }
                    sortedRows.push(row);
                    previousValue = currentValue;
                }
            } else {
                sortedRows.push(["NO OPEN SPECIAL COVERAGE"]);
            }
            sortedRows.push(...Array(2).fill(Array(headerRow.length).fill("")));
        } else if (i === 4) {
            sortedRows.push([titles[5]]);
            sortedRows.push(headerRow);
            if (groupedRows[i].length > 0) {
                let previousValue: string | null = null;
                for (let row of groupedRows[i]) {
                    let currentValue = row[1] as string;
                    if (previousValue !== null && currentValue !== previousValue) {
                        sortedRows.push(Array(headerRow.length).fill(""));
                    }
                    sortedRows.push(row);
                    previousValue = currentValue;
                }
            } else {
                sortedRows.push(["NO OPEN SPECIAL COVERAGE"]);
            }
        }
    }
    range.clear(ExcelScript.ClearApplyTo.contents);
    let finalRows = sortedRows.map(row => {
        if (row.length < headerRow.length) return row.concat(Array(headerRow.length - row.length).fill(""));
        return row;
    });
    let finalRange = worksheet.getRangeByIndexes(0, 0, finalRows.length, headerRow.length).setValues(finalRows);
    for (let i = 0; i < finalRows.length; i++) {
        if (finalRows[i][0] === "NO OPEN SPECIAL COVERAGE") {
            let noDataRange = worksheet.getRangeByIndexes(i, 0, 1, 7);
            noDataRange.merge(true);
            noDataRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
            noDataRange.getFormat().getFont().setBold(true);
            noDataRange.getFormat().getFont().setColor("red");
        }
    }
    for (let i = 0; i < titles.length; i++) {
        let titleRow = finalRows.findIndex(row => row[0] === titles[i]);
        if (titleRow !== -1) {
            let titleRange = worksheet.getRangeByIndexes(titleRow, 0, 1, 7);
            titleRange.merge(true);
            titleRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
            titleRange.getFormat().getFont().setSize(14);
            titleRange.getFormat().getFill().setColor("#BDD7EE");
        }
    }
    let headerRange = worksheet.getRangeByIndexes(1, 0, 1, headerRow.length);
    headerRange.getFormat().getFill().setColor("#D9D9D9");
}

function processAncillaryWorksheet(workbook: ExcelScript.Workbook) {
    const deleteKeywords: string[] = [
        "AgeCare", "Norwood", "Grandview", "Dickensfield", "Edmonton General",
        "Misercordia", "Grey Nuns", "Covenant", "CapitalCare",
        "CY15788", "EN12388", "EN12489", "EN9426", "GE7210"
    ];
    const moveKeywords: string[] = [
        "AgeCare", "Norwood", "Grandview", "Dickensfield", "Bonnyville",
        "Edmonton General", "Misercordia", "Grey Nuns", "Covenant", "CapitalCare",
        "CY15788", "EN12388", "EN12489", "EN9426", "GE7210"
    ];
    let ancillarySheet = workbook.getWorksheet("ancillary");
    if (!ancillarySheet) return;
    let ancillaryRange = ancillarySheet.getUsedRange();
    if (!ancillaryRange) return;
    let ancillaryValues: string[][] = ancillaryRange.getValues() as string[][];
    for (let index = ancillaryValues.length - 1; index >= 0; index--) {
        let row = ancillaryValues[index];
        let rowShouldBeDeleted = true;
        for (let cell of row) {
            if (typeof cell === "string") {
                for (let keyword of deleteKeywords) {
                    if (cell.includes(keyword)) {
                        rowShouldBeDeleted = false;
                        break;
                    }
                }
            }
            if (!rowShouldBeDeleted) break;
        }
        if (rowShouldBeDeleted) ancillaryRange.getRow(index).delete(ExcelScript.DeleteShiftDirection.up);
    }
    const indexKeywords: {
        keyword: string[], titleRow: number, title: string
    }[] = [
            { keyword: ["Bonnyville", "Edmonton General", "Misercordia", "Grey Nuns", "Covenant", "EN12388", "EN12489", "EN9426", "GE7210"], titleRow: 30, title: "COVENANT CARE WATCHLIST (TODAY's Date)" },
            { keyword: ["Norwood", "Grandview", "Dickensfield", "CapitalCare"], titleRow: 50, title: "CAPITAL CARE WATCHLIST (TODAY's Date)" },
            { keyword: ["AgeCare"], titleRow: 70, title: "AGECARE WATCHLIST (TODAY's Date)" }
        ];
    const headerRow: string[] = ["JobNumber", "JobDescription", "WorkDate", "InTime", "OutTime", "PostDescription", "EmpName"];
    const today = new Date();
    const formattedDate = today.toISOString().split('T')[0];
    for (let indexConfig of indexKeywords) {
        const updatedTitle = indexConfig.title.replace("(TODAY's Date)", `(${formattedDate})`);
        ancillarySheet.getCell(indexConfig.titleRow - 1, 0).setValue(updatedTitle);
        ancillarySheet.getRange(`A${indexConfig.titleRow + 1}:G${indexConfig.titleRow + 1}`).setValues([headerRow]);
    }
    const rowsForIndex30: string[][] = [];
    const rowsForIndex50: string[][] = [];
    const rowsForIndex70: string[][] = [];
    for (let rowIndex = 0; rowIndex < ancillaryValues.length; rowIndex++) {
        let row = ancillaryValues[rowIndex];
        let matchedConfig: { keyword: string[], titleRow: number } | null = null;
        for (let indexConfig of indexKeywords) {
            for (let cell of row) {
                if (typeof cell === "string") {
                    let normalizedCell = cell.replace(/[-\s]/g, "").toLowerCase();
                    for (let keyword of indexConfig.keyword) {
                        let normalizedKeyword = keyword.replace(/[-\s]/g, "").toLowerCase();
                        if (normalizedCell.includes(normalizedKeyword)) {
                            matchedConfig = indexConfig;
                            break;
                        }
                    }
                }
                if (matchedConfig) break;
            }
            if (matchedConfig) break;
        }
        if (matchedConfig) {
            if (matchedConfig.titleRow === 30) {
                rowsForIndex30.push(row);
            } else if (matchedConfig.titleRow === 50) {
                rowsForIndex50.push(row);
            } else if (matchedConfig.titleRow === 70) {
                rowsForIndex70.push(row);
            }
        }
    }
    const sortRows = (rows: string[][]) => {
        return rows.sort((a, b) => {
            if (a[1] < b[1]) return -1;
            if (a[1] > b[1]) return 1;
            if (a[2] < b[2]) return -1;
            if (a[2] > b[2]) return 1;
            if (a[3] < b[3]) return -1;
            if (a[3] > b[3]) return 1;
            return 0;
        });
    };
    const sortedRowsForIndex30 = sortRows(rowsForIndex30);
    const sortedRowsForIndex50 = sortRows(rowsForIndex50);
    const sortedRowsForIndex70 = sortRows(rowsForIndex70);
    const insertEmptyRows = (rows: string[][]) => {
        const rowsWithGaps: string[][] = [];
        let previousJobDescription: string | null = null;
        for (let row of rows) {
            const currentJobDescription = row[1];
            if (currentJobDescription !== previousJobDescription && previousJobDescription !== null) {
                rowsWithGaps.push(new Array(7).fill(""));
            }
            rowsWithGaps.push(row);
            previousJobDescription = currentJobDescription;
        }
        return rowsWithGaps;
    };
    const rowsWithGapsForIndex30 = insertEmptyRows(sortedRowsForIndex30);
    const rowsWithGapsForIndex50 = insertEmptyRows(sortedRowsForIndex50);
    const rowsWithGapsForIndex70 = insertEmptyRows(sortedRowsForIndex70);
    const addEmptyRowsAtEnd = (rows: string[][]) => {
        rows.push(new Array(7).fill(""));
        rows.push(new Array(7).fill(""));
        return rows;
    };
    const rowsWithGapsAndEndForIndex30 = addEmptyRowsAtEnd(rowsWithGapsForIndex30);
    const rowsWithGapsAndEndForIndex50 = addEmptyRowsAtEnd(rowsWithGapsForIndex50);
    const rowsWithGapsAndEndForIndex70 = addEmptyRowsAtEnd(rowsWithGapsForIndex70);
    const placeRows = (rows: string[][], startRow: number) => {
        for (let i = 0; i < rows.length; i++) {
            ancillarySheet.getRange(`A${startRow + i}:G${startRow + i}`).setValues([rows[i]]);
        }
    };
    placeRows(rowsWithGapsAndEndForIndex30, 32);
    placeRows(rowsWithGapsAndEndForIndex50, 52);
    placeRows(rowsWithGapsAndEndForIndex70, 72);
    const rowsToCheck = [33, 53, 73];
    for (let row of rowsToCheck) {
        if (ancillarySheet.getRange(`A${row}:G${row}`).getValue() === "") {
            ancillarySheet.getRange(`A${row}:G${row}`).merge(false);
            ancillarySheet.getRange(`A${row}`).setValue("NO OPEN SPECIAL COVERAGE");
        }
    }
    for (let indexConfig of indexKeywords) {
        let titleRange = ancillarySheet.getRange(`A${indexConfig.titleRow}:G${indexConfig.titleRow}`);
        titleRange.merge(false);
        let titleFormat = titleRange.getFormat();
        titleFormat.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
        titleFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);
        titleFormat.getFont().setSize(14);
    }
    for (let indexConfig of indexKeywords) {
        let titleRange = ancillarySheet.getRange(`A${indexConfig.titleRow}:G${indexConfig.titleRow}`);
        let titleFormat = titleRange.getFormat();
        titleFormat.getFill().setColor("#ADD8E6");
    }
    for (let indexConfig of indexKeywords) {
        let headerRange = ancillarySheet.getRange(`A${indexConfig.titleRow + 1}:G${indexConfig.titleRow + 1}`);
        let headerFormat = headerRange.getFormat();
        headerFormat.getFill().setColor("#D3D3D3");
    }
    ancillarySheet.getRange("1:29").delete(ExcelScript.DeleteShiftDirection.up);
    ancillarySheet.getRange("30:40").delete(ExcelScript.DeleteShiftDirection.up);
    const capitalCareTitle = `CAPITALCARE WATCHLIST (${formattedDate})`;
    const capitalCareTitleRange = ancillarySheet.getRange("A21:G21");
    capitalCareTitleRange.merge(false);
    capitalCareTitleRange.setValue(capitalCareTitle);
    const capitalCareTitleFormat = capitalCareTitleRange.getFormat();
    capitalCareTitleFormat.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);
    capitalCareTitleFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);
    capitalCareTitleFormat.getFont().setSize(14);
    capitalCareTitleFormat.getFill().setColor("#ADD8E6");
    ancillarySheet.getUsedRange().getFormat().autofitColumns();
    ancillarySheet.getUsedRange().getFormat().autofitRows();
}